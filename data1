[
  {
    "title": "Introduction",
    "data": "MongoDB is a document database designed for ease of development and scaling. The Manual introduces key concepts in MongoDB, presents the query language, and provides operational and administrative considerations and procedures as well as a comprehensive reference section.\n\nMongoDB offers both a Community and an Enterprise version of the database:\n\nMongoDB Community is the source available and free to use edition of MongoDB.\n\nMongoDB Enterprise is available as part of the MongoDB Enterprise Advanced subscription and includes comprehensive support for your MongoDB deployment. MongoDB Enterprise also adds enterprise-focused features such as LDAP and Kerberos support, on-disk encryption, and auditing.",
    "subtype1": "Document Database",
    "data1": "A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.\n\nA MongoDB document.\nThe advantages of using documents are:\n\n1. Documents (i.e. objects) correspond to native data types in many programming languages.\n2. Embedded documents and arrays reduce need for expensive joins.\n3. Dynamic schema supports fluent polymorphism.",
    "subtype2": "Collections/Views/On-Demand Materialized Views",
    "data2": "MongoDB stores documents in collections. Collections are analogous to tables in relational databases.\n\nIn addition to collections, MongoDB supports:\n\nRead-only Views (Starting in MongoDB 3.4)\nOn-Demand Materialized Views (Starting in MongoDB 4.2).}",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Key Features",
    "data": "",
    "subtype1": "High Performance",
    "data1": "MongoDB provides high performance data persistence. In particular,\n\nSupport for embedded data models reduces I/O activity on database system.\nIndexes support faster queries and can include keys from embedded documents and arrays.",
    "subtype2": "Rich Query Language",
    "data2": "MongoDB supports a rich query language to support read and write operations (CRUD) as well as:\n\nData Aggregation\nText Search and Geospatial Queries.\n",
    "subtype3": "High Availability",
    "data3": "MongoDBâ€™s replication facility, called replica set, provides:\n1. automatic failover\n2. Data redundancy.\n3. A replica set is a group of MongoDB servers that maintain the same data set, providing redundancy and increasing data availability.",
    "subtype4": "Support for Multiple Storage Engines",
    "data4": "MongoDB supports multiple storage engines:\n\n1. WiredTiger Storage Engine (including support for Encryption at Rest)\n2. In-Memory Storage Engine.\n3. In addition, MongoDB provides pluggable storage engine API that allows third parties to develop storage engines for MongoDB."
  },
  {
    "title": "Advantage",
    "data": "Having seen the good features of MongoDB, now every developer should be able to understand why it is better to use NoSQL based database for big data transactions and for implementing a scalable model. Now, its time to leave behind the schema definitions of RDBMS and get an advantage of using schema-less databases like MongoDB. Let us see some of the vital advantages of MongoDB ",
    "subtype1": "Advantages of MongoDB ",
    "data1": "First and foremost, it is very easy to install and setup the MongoDB.\n\n1. The very basic feature of MongoDB is that it is a schema-less database. No schema migrations anymore. Since MongoDB is schema-free, your code defines your schema.\n2. The ability to derive a document-based data model is one of the most attractive advantages of MongoDB. Because, the way it stores the data in the form of BSON (Binary JSON), ruby hashes etc, helps to store the data in a very rich way while being capable of holding arrays and other documents.\n3. The document query language supported by MongoDB plays a vital role in supporting dynamic queries.\n4. Very easy to scale.\n5. Due to the structuring (BSON format - key value pair) way of the data in MongoDB, no complex joins are needed.\n6. Performance tuning is absolutely easy compared to any relational databases.\n7. No need of mapping the application objects to the data objects.\nEnables faster access of the data due to its nature of using the internal memory for the storage.\n8. Since, it is a NOSQL database, then it is obviously secure because no sql injection can be made.\n9. MongoDB can also be used as a file system, which helps in easier way of load balancing.\n10. MongoDB supports, the search by regex and fields as well.\nMongoDB can be run as windows service as well.\n11. Good amount of documentation is available.\n12. MongoDB does not require a VM to be run.\n13. MongoDB follows regular release cycle of its newer versions.\n14. The support for Sharding is one of its key feature. Sharding is the process of storing the data in different machines and MongoDB's ability to process the data, as and when the size of the data grows. This results in the horizontal scaling. With sharding, more amount of data can be written and read back as and when there is an increase in the data growth.",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Is MongoDB really Schemaless?",
    "data": "By now it is well known that the MongoDB is Schemaless. We need to understand what is that makes the MongoDB beahve as a schemaless database.\n\nEvery RDBMS database will possess a structure with respect to persisting the data. So, when the database needs to be modified, say a column of particular table needs to be modified(changing the datatype) or adding/removing a column from a table, we have to mention, what type of data this column will hold.\n\nBut, MongoDB is a document based database, which does not use the concept of tables and columns, instead of which it uses the concept of documents and collections. All the referential data with respect to different modules will be stored as one collection. More over the BSON data structure used by MongoDB can easily have varying sets of data and fields with different types.\n\nWhen we say schemaless, we actually mean dynamically typed schema, as opposed to statically typed schemas as available in RDBMS(SQL) databases.\n\nJSON is a completely schema free data structure, as opposed to XML which allows you to specify XSD if you need.\n\nWhenever we store something in MongoDB, we know what we are storing, its a String, Int or a custome Object in JSON format, and as soon as we try to store it in a collection, MongoDB accepts it as a JSON formatted data.\n\nAnd when you read somewhere that data migration is easy in NoSQL databases, its also not absolutely true. There are certain scenarios where document based databases like MongoDB proves to be better, but there are scenarios where SQL based databases have the upper hand. For example : data processing while migrating, takes longer in case of NoSQL due to data duplication, while in a Normalised SQL database, minimal data duplication is there.",
    "subtype1": "",
    "data1": "",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Installing MongoDB on Windows and Linux",
    "data": "In the previous tutorial, we have learnt about Introduction, Overview, Advantages, Features and when to use MongoDB. In this tutorial we will learn how to setup MongoDB in our local machines. We will be covering steps to install MongoDB and related tools on Windows operating system and Linux operating system.",
    "subtype1": "Installing MongoDB on Windows",
    "data1": "Installing MongoDB on a Windows machine is very easy. Below are the steps involved in installing the MongoDB:\n\nDownload MongoDB executable .msi file from the site MongoDB Download Centre. Select the latest version for Windows, the Windows Server 2008 R2 is the version if you are on Windows 7, 8 or 10.\nInstalling MongoDB on Windows\n\nDouble click the downloaded .msi file to start the installation. Select the option Custom during the installation process, to specify a custom location where you want MongoDB to be installed. By default it is installed in C:\\mongodb directory.\nOnce the installation is successful, the below directory structure is created. We have installed our MongoDB in D:\\java\\mongodb\nInstalling MongoDB on Windows\n\nNavigate to the bin directory of the MongoDB to understand about the components used in MongoDB. Below are some of the vital components and files to run them:\nComponent\t\t.exe File\nServer\t\tmongod.exe\nRouter\t\tmongos.exe\nClient\t\tmongo.exe\n\nIt is required to set up the MongoDB environment. MongoDB stores all its data under the folder data\\db. It is best practice to create this directory under the folder where the MongoDB is installed. So let's create a folder named data and one more folder named db inside data folder as shown below.\nInstalling MongoDB on Windows\n\nAlso create a log folder to log the MongoDB data transactions. Under the log folder, create a log file FILE_NAME.log.\nNow, to verify whether the installation is successful or not, open the command prompt and navigate to the bin directory of the MongoDB installed folder.\nExecute the command mongod.exe --dbpath \"DATA_DIRECTORY_PATH\" to configure the data path and start the MongoDB server. Please replace the DATA_DIRECTORY_PATH with the path of data directory present inside MongoDB installed folder. On running this command, the below log will be displayed which says that the MongoDB configuration is successful and the server is up and running fine.\nInstalling MongoDB on Windows\n\nNow, open another command prompt window and navigate to the bin directory of the MongoDB again, and start the MongoDB client in order to use the database system. Run the command mongo in Command Prompt and it will get connected to the MongoDB where the default database is test.\nInstalling MongoDB on Windows\n\nWith this, we have successfully installed the MongoDB on the windows environment and we are good to start off with the MongoDB.",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Data Modelling in MongoDB",
    "data": "As explained in the earlier lessons, data in MongoDB is schema-less, which means there is no need of defining a structure for the data before insertion. Since, MongoDB is a document based database, any document within the same collection is not mandatory to have same set of fields or structure. This helps in easily mapping the documents with the entity objects. In general, the documents in a collection of MongoDB will always share the same data structure(recommended for best performance, not mandatory).\n\nThe vital factor or challenge in modelling the data in a given database is load balancing and hence ensuring the performance aspect effectively. It is a mandate while modelling the data to consider the complete usage of data (CRUD operations) along with how the data will be inherited as well.\n\nThere are 2 ways in which the relationships between the data can be established in MongoDB:\n\n1. Reference Documents\n2. Embedded Documents\n",
    "subtype1": "MongoDB: Referenced Documents",
    "data1": "This is one of the ways to implement the relationship between data stored in different collections. In this, a reference to the data in one collection will be used in connecting the data between the collections.\n\nConsider 2 collections books and authors as shown below:\n\n\n{\n  title: \"Java in action\",\n  author: \"author1\",\n  language: \"English\",\n  publisher: {\n             name: \"My publications\",\n             founded:1990,\n             location: \"SF\"\n            }\n}\n\n{\n  title: \"Hibernate in action\",\n  author: \"author2\",\n  language: \"English\",\n  publisher: {\n             name: \"My publications\",\n             founded:1990,\n             location: \"SF\"\n            }\n}\n\n \nIn the above example, the publisher data is repeated. In order to avoid this repetition, we can add references of the book to the publisher data instead of using entire data of publisher in every book entry, as shown below:\n\n\n{\n  name: \"My Publciations\",\n  founded:1980,\n  location: \"CA\",\n  books: [111222333,444555666, ..]\n}\n\n{\n   _id:111222333,\n   title: \"Java in action\",\n   author: \"author1\",\n   language: \"English\"\n}\n\n{\n  _id:444555666,\n  title: \"Hibernate in action\",\n  author: \"author2\",\n  language: \"English\"\n}\nThis can be done the other way round as well, where in one can reference the publisher id in the books data, your choice.",
    "subtype2": "MongoDB: Embedded Documents",
    "data2": "In this, one collection will be embedded into another collection. Consider 2 collections student and address. Let us see how the address can be embedded into student collection. Below is an example embedding single address to student data.\n\n\n{\n  _id:123,\n  name: \"Student1\"\n}\n\n{\n  _studentId:123,\n  street: \"123 Street\",\n  city: \"Bangalore\",\n  state: \"KA\"\n}\n\n{\n  _studentId:123,\n  street: \"456 Street\",\n  city: \"Punjab\",\n  state: \"HR\"\n}\nEmbedding multiple addresses can also be done. See the below example :\n\n\n{\n  _id:123,\n  name: \"Student1\"\n  addresses: [\n      \t{\n             \tstreet: \"123 Street\",\n   \t\tcity: \"Bangalore\",\n   \t\tstate: \"KA\"\n        },\n\n        {\n   \t\tstreet: \"456 Street\",\n   \t\tcity: \"Punjab\",\n   \t\tstate: \"HR\"\n        }\n    ]\n}",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Datatypes in MongoDB",
    "data": "It is known that the MongoDB stores the JSON data in a binary encoded format called BSON, where JSON data model actually extends the BSON in order to provide more flexibility with the additional data types and helps in easily encoding and decoding the data across various programming languages. By default, there is no support for the datatypes like date in JSON. But, BSON provides that feature.\n\nMongoDB supports the below list of datatypes. Each datatype in MongoDB possess a unique number.",
    "subtype1": "",
    "data1": "Double\nUsed to stored floating point values\n\nString\nCommonly used datatype and it is UTF-8 valid\n\nObject\nUsed for storing embedded objects\n\nArray\nUsed for storing embedded objects\n\nBinary Data\nUsed to store binary data\n\nUndefined\nUsed to store undefined value\n\nObject Id\nUsed to store document's ID\n\nBoolean\nUsed to store Boolean value\n\nDate\nUsed to store current date time in UNIX format.\n\nNull\nUsed to store null value\n\nRegular Expression\nUsed to store regex\n\nJavascript\nUsed to store JavaScript data without scope\n\nSymbol\nBasically used to store string, but reserved for languages that use specific symbol\n\nJavascript with scope\nUsed to store JavaScript data with scope\n\nInteger\nUsed to store numerical value\n\nTimestamp\nUsed to track when a document is modified.\n\nMin/Max Key\nUsed to compare value against lowest and highest BSON elements",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Create and Drop Database",
    "data": "In this tutorial we will learn how to create and drop a Database in MongoDB.",
    "subtype1": "MongoDB: Creating a Database",
    "data1": "Open the command prompt and navigate to the /bin folder of the MongoDB using the cd command and execute the command mongod there. This will initiate the MongoDB server. We have to keep this command prompt window alive, as this is running MongoDB. To stop the MongoDB server, simply enter exit and press Enter.\n\nNow, Open another command prompt and navigate to the /bin folder of the MongoDB again and execute the command mongo. This will open up the client to run the MongoDB commands.\u2028\n\nConnect to MongoDB\n\nIn the command prompt window in which we ran the mongo command, after successfully connecting to the mongodb, just type the command the following :\n\nuse database_name\nThis will create a new database with the name database_name if there is no database already present with the same name. If a database already exists with the mentioned name, then it just connects to that database.\nTo check the current connected database, type in db in the command prompt window, and you will get the name of the current database as result.\n\nChecking active Database in MongoDB\n\nTo see the list of all the databases in MongoDB, use command show dbs\n\nList all Databases in MongoDB\n\nPlease note that the newly created dstabase mynewdatabase has not been listed after running the above command. This is because, no records have been inserted into that database yet. Just insert one record and then run the command again as shown below:\n\nList all Databases in MongoDB\n\nTo Insert data, run the following command. Dont worry about it, we will learn this in detail in next lessons.\n\ndb.student.insert({name : \"Viraj\" })\nNOTE: In MongoDB, test will be the default database. If no database is created, then all the data will be stored in the test database.",
    "subtype2": "MongoDB: Drop a Database",
    "data2": "First check the list of databases available as shown below, using the show dbs command.\n\nList all Databases in MongoDB\n\nIf the newly created database mynewdatabase has to be dropped(deleted). Run the below command to delete the database. Before deleting the database, connect to the required database which is to be deleted.\n\ndb.dropDatabase()\nDrop Database in MongoDB\n\nNow again check the list of databases, to verify whether the database is deleted or not.\n\nList all Databases in MongoDB\n\nNote that the database mynewdatabase has been deleted and hence, it will not be listed in the list of the databases.",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },

  {
    "title": "Create and Drop Collections",
    "data": "",
    "subtype1": "MongoDB: Creating a Collection",
    "data1": "In MongoDB a collection is automatically created when it is referenced in any command. For example, if you run an insert command :\n\ndb.student.insert({\n\tname: \"Viraj\"\n})\n\nAbove command will create a collection named student if it doesn't exist already in the database. But we can explicitly create a collection using the createCollection() command. The syntax of createCollection method is:\n\ndb.createCollection(name, options)\nIn the above command, name will be the name of the collection and options is a document which can be used to specify configurations for the collection.\n\"options parameter\", is optional, and you can simply create a collection by just providing a name for the collection. But if you want to configure your collection, you can use various options available to do so. \n\nFollowing are the available configuration options for creating a collection in MongoDB: (Field\tType\tDescription)\n\ncapped\tboolean\t(Optional)\nTo create a capped collection, where in we specify the the maximum size or document counts to prevent it from growing beyond a set maximum value.\n\nsize\tnumber\t(Optional) \nTo specify the maximum size in bytes for a capped collection. If a collection is capped and reaches its maximum size limit, MongoDB then removes older documents from it to make space for new.\n\nmax\tnumber\t(Optional) \nThis can be used to specify the maximum number of documents allowed in a capped collection.\n\nvalidator\tdocument\t(Optional) \nValidates any document inserted or updated against provided validation rules.\n\nvalidationLevel\tstring\t(Optional) \nThis is used to define how strictly validation rules must be applied to existing documents during an update.\nAvailable values are :\n1.\toff - No validation for inserts or updates.\n2.\tstrict - This is the default value for this option. This instructs MongoDB to apply validation rules to all inserts and updates.\n3.\tmoderate - This is used when we want to apply validation rules to inserts and updates on only the existing valid documents and not on the existing invalid documents.\n\nvalidationAction\tstring\t(Optional) \nThis can be used to set the action to be taken upon validation i.e. if any document fails the set validation then whether to show error or just warn about the violations. Default value is error.",
    "subtype2": "MongoDB: Creating a Capped Collection",
    "data2": "We can create a capped collection using the following command.\n\ndb.createCollection(\"student\", { capped : true, size : 5242880, max : 5000 } )\nThis will create a collection named student, with maximum size of 5 megabytes and maximum of 5000 documents.",
    "subtype3": "MongoDB: Drop a Collection",
    "data3": "Any collection in a database in MongoDB can be dropped easily using the following command:\n\ndb.collection_name.drop()\ndrop() method will return true is the collection is dropped successfully, else it will return false.",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "CRUD Operations",
    "data": "CRUD operations refer to the basic Insert, Read, Update and Delete operations. In the previous chapter, we learnt about how to create a database and drop the database in MongoDB. Now, let us learn how to perform CRUD (Create/Read/Update/Delete) operations in MongoDB",
    "subtype1": "MongoDB: Inserting a document into a collection(Create)",
    "data1": "The command db.collection.insert() will perform an insert operation into a collection of a document.\n\nLet us insert a document to a student collection. You must be connected to a database for doing any insert. It is done as follows:\n\ndb.student.insert({\n\tregNo: \"3014\",\n\tname: \"Test Student\",\n\tcourse: {\n\t\tcourseName: \"MCA\",\n\t\tduration: \"3 Years\"\n\t},\n\taddress: {\n\t\tcity: \"Bangalore\",\n\t\tstate: \"KA\",\n\t\tcountry: \"India\"\n\t}\n})",
    "subtype2": "MongoDB: Querying a document from a collection(Read)",
    "data2": "To retrieve (Select) the inserted document, run the below command. The find() command will retrieve all the documents of the given collection.\n\ndb.collection_name.find()\nIf a record is to be retrieved based on some criteria, the find() method should be called passing parameters, then the record will be retrieved based on the attributes specified.\n\ndb.collection_name.find({\"fieldname\":\"value\"})\nFor Example: Let us retrieve the record from the student collection where the attribute regNo is 3014 and the query for the same is as shown below:\n\ndb.students.find({\"regNo\":\"3014\"})",
    "subtype3": "MongoDB: Updating a document in a collection(Update)",
    "data3": "In order to update specific field values of a collection in MongoDB, run the below query.\n\ndb.collection_name.update()\nupdate() method specified above will take the fieldname and the new value as argument to update a document.\n\nLet us update the attribute name of the collection student for the document with regNo 3014.\n\ndb.student.update({\n\t\"regNo\": \"3014\"\t\n},\n$set:\n{\n\t\"name\":\"Viraj\"\n})",
    "subtype4": "MongoDB: Removing an entry from the collection(Delete)",
    "data4": "Let us now look into the deleting an entry from a collection. In order to delete an entry from a collection, run the command as shown below:\n\ndb.collection_name.remove({\"fieldname\":\"value\"})\nFor Example: db.student.remove({\"regNo\":\"3014\"})"
  },
  {
    "title": "Data Relationships",
    "data": "Relationships in MongoDB are used to specify how one or more documents are related to each other. In MongoDB, the relationships can be modelled either by Embedded way or by using the Reference approach. These relationships can be of the following forms:\nOne to One\nOne to Many\nMany to Many",
    "subtype1": "MongoDB: Embedded and Reference Relationship",
    "data1": "In Embedded approach, one document will be embedded in another document (like a subset).\n\nIn Reference approach, the documents are maintained separately (student and address). But, the student document will have a reference to the address document id field. This is basically used for designing normalized relationships. The basic idea behind any NoSQL database is to eliminate the complex relationships between documents, and MongoDB does the same. But, there are scenarios where these relationships are required to be modelled in the database.",
    "subtype2": "MongoDB: One to One Relationship",
    "data2": "Consider a student database of a college, where the college restricts only one course can be availed by the student at a time. So, this is nothing but One to One relationship i.e. a student can be enrolled only to one course at a time.",
    "subtype4": "MongoDB: Many to Many Relationship",
    "data4": "Consider the same student database example, where a student can have different roles like leader, cricket captain, football captain etc. i.e. many roles can be accomplished by students or students can be associated to multiple roles",
    "subtype3": "MongoDB: One to Many Relationship",
    "data3": "Continuing with the same student database example, consider a student can have more than one address (permanent and current)"
  },
  {
    "title": "Indexing in MongoDB",
    "data": "Indexes in SQL programming are nothing but a special data structure used to easily and quickly locate the record in a given table of the database without being required to traverse through each and every record of the table. Indexes are easily generated using one or more columns of a given table. As a note, the data structure used by an index is a Binary Tree (B-Tree).\n\nIn MongoDB, indexes plays a vital role in efficiently execution of the queries. Basically, if no index is defined in MongoDB, then it has to scan every document of a given collection. Hence, MongoDB uses index to reduce the number of documents to be scanned in a given collection. In fact, MongoDB's index is more or less similar to the indexes used in other relational databases.\n\nThe fact is that the MongoDB defines the indexes at the collection level and supports indexing on any fields in a MongoDB collection.",
    "subtype1": "Default Index in MongoDB",
    "data1": "Mongodb provides a default index named _id which acts as a primary key to access any document in a collection. This _id index basically avoids the insertion of 2 documents with the same value for the _id field.",
    "subtype2": "Creating an Index using createIndex()",
    "data2": "To create an index in MongoDB, run the following command :\n\ndb.collection_name.createIndex({field : value })\nTo create an index on the field regNo for a student collection, run the command db.student.createIndex({regNo : 1})\n\nFollowing will be the output upon running the above command :\n\n{\n\t\"createdCollectionAutomatically\": false,\n\t\"numIndexesBefore\" : 1,\n\t\"numIndexesAfter\" : 2,\n\t\"ok\" : 1\n}\nWe can also create Index on multiple fields by running a single command. The command will be : db.student.createIndex({regNo : 1, address : -1})\n",
    "subtype3": "Types of Indexes in MongoDB",
    "data3": "1.\tSingle field index\nUsed to create an index on a single field and it can be a user defined as well apart from the default _id one.\n\n2.\tCompound index\nMongoDB supports the user-defined indexes on multiple fields.\n\n3.\tMulti key index\nMongoDB uses multi key indexes basically to store the arrays. MongoDB creates a separate index for each element in an array. MongoDB intelligently identifies to create a multi key index if the index contains elements from an array.\n\n4.\tGeospatial index\nUsed to support the queries required for the geospatial coordinate data.\n\n5.\tText index\nThis index is used to search for a string content in a collection\n\n6.\tHashed index\nUsed for hash based Sharding",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Sorting in MongoDB",
    "data": "Sorting the data in any database is one of the vital operations in any database management system. MongoDB provides sort() function in order to sort the data in a collection. Sort function in MongoDB accepts a list of values and an integer value 1 or -1 which states whether the collection to be sorted in ascending (1) or descending (-1) order.\n\nSyntax for sort function:\n\ndb.collection_name.find().sort({KEY : 1}) \nConsider a collection named student containing 3 records. Let us now see how the data can be sorted using the sort() function in MongoDB.\n\nTo list down all the data in a collection, use the find() command. To create the same sample data as used here in the example, create a collection named student and insert 3 documents with one field name and some value for it. In the next step we will run the sort command on this sample data.\n\nList down collection data in MongoDB\n\nNow run the below query to sort the data by the name field in ascending order :\n\ndb.student.find().sort({name : 1})\n\nNow run the below query to sort the data by the name field in descending order :\n\ndb.student.find().sort({name : -1})\n\n\nNOTE: If you do not specify the sorting preference(i.e 1 or -1), then by default documents in a collection are sorted in ascending order.",
    "subtype1": "",
    "data1": "",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Aggregation in MongoDB",
    "data": "Aggregation in MongoDB is nothing but an operation used to process the data that returns the computed results. Aggregation basically groups the data from multiple documents and operates in many ways on those grouped data in order to return one combined result. In sql count(*) and with group by is an equivalent of MongoDB aggregation.\n\nAggregate function groups the records in a collection, and can be used to provide total number(sum), average, minimum, maximum etc out of the group selected.\n\nIn order to perform the aggregate function in MongoDB, aggregate () is the function to be used. Following is the syntax for aggregation :\n\ndb.collection_name.aggregate(aggregate_operation)\n\nLet us now see how to make use of the aggregate function in MongoDB. Consider a collection named books with the data as shown below :\n\nNOTE : Create a collection named books, with fieldnames - title, price and type. Use db.books.find() to list down the contents of the collection.\n\nAggregation in MongoDB\n\n\nNow, from the above collection, let us use the aggregate function to group the books which are of the type ebook and online. Following command will be used :\n\ndb.books.aggregate([{$group : {_id: \"$type\", category: {$sum : 1}}}])",
    "subtype1": "Different expressions used by Aggregate function",
    "data1": "$sum\nSummates the defined values from all the documents in a collection\n\n$avg\nCalculates the average values from all the documents in a collection\n\n$min\nReturn the minimum of all values of documents in a collection\n\n$max\nReturn the maximum of all values of documents in a collection\n\n$addToSet\nInserts values to an array but no duplicates in the resulting document\n\n$push\nInserts values to an array in the resulting document\n\n$first\nReturns the first document from the source document\n\n$last\nReturns the last document from the source document",
    "subtype2": "",
    "data2": "",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Auto-Increment Sequence",
    "data": "MongoDB does not have out-of-the-box auto-increment functionality, like SQL databases. By default, it uses the 12-byte ObjectId for the _id field as the primary key to uniquely identify the documents. However, there may be scenarios where we may want the _id field to have some auto-incremented value other than the ObjectId.\n\nSince this is not a default feature in MongoDB, we will programmatically achieve this functionality by using a counters collection as suggested by the MongoDB documentation.",
    "subtype1": "Using Counter Collection",
    "data1": "Consider the following products document. We want the _id field to be an auto-incremented integer sequence starting from 1,2,3,4 upto n.\n\n{\n  \"_id\":1,\n  \"product_name\": \"Apple iPhone\",\n  \"category\": \"mobiles\"\n}\nFor this, create a counters collection, which will keep track of the last sequence value for all the sequence fields.\n\n>db.createCollection(\"counters\")\nNow, we will insert the following document in the counters collection with productid as its key âˆ’\n\n{\n  \"_id\":\"productid\",\n  \"sequence_value\": 0\n}\nThe field sequence_value keeps track of the last value of the sequence.\n\nUse the following code to insert this sequence document in the counters collection âˆ’\n\n>db.counters.insert({_id:\"productid\",sequence_value:0})",
    "subtype2": "Creating Javascript Function",
    "data2": "Now, we will create a function getNextSequenceValue which will take the sequence name as its input, increment the sequence number by 1 and return the updated sequence number. In our case, the sequence name is productid.\n\n>function getNextSequenceValue(sequenceName){\n\n   var sequenceDocument = db.counters.findAndModify({\n      query:{_id: sequenceName },\n      update: {$inc:{sequence_value:1}},\n      new:true\n   });\n\t\n   return sequenceDocument.sequence_value;\n}",
    "subtype3": "Using the Javascript Function",
    "data3": "We will now use the function getNextSequenceValue while creating a new document and assigning the returned sequence value as document's _id field.\n\nInsert two sample documents using the following code âˆ’\n\n>db.products.insert({\n   \"_id\":getNextSequenceValue(\"productid\"),\n   \"product_name\":\"Apple iPhone\",\n   \"category\":\"mobiles\"\n})\n\n>db.products.insert({\n   \"_id\":getNextSequenceValue(\"productid\"),\n   \"product_name\":\"Samsung S3\",\n   \"category\":\"mobiles\"\n})\nAs you can see, we have used the getNextSequenceValue function to set value for the _id field.\n\nTo verify the functionality, let us fetch the documents using find command âˆ’\n\n>db.products.find()\nThe above query returned the following documents having the auto-incremented _id field âˆ’\n\n{ \"_id\" : 1, \"product_name\" : \"Apple iPhone\", \"category\" : \"mobiles\"}\n\n{ \"_id\" : 2, \"product_name\" : \"Samsung S3\", \"category\" : \"mobiles\" }",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Data Backup and Restoration",
    "data": "Data backup is one of the vital and highly required process for any database management system. The primary reason being is that it is difficult to anticipate how and when the data can be lost. So it is an ideal and best practice that whenever a database is setup, we need to ensure that it has a provision for the data backup in case of any loss events happens.\n\nA backup is nothing but the copy of data from the database which helps in reusing the database in case of any catastrophic event happens to the data.",
    "subtype1": "MongoDB: Taking Data Backup",
    "data1": "In order to perform a data backup process in mongodb, the command mongodump should be used. This command will simply dump all the data stored into a dump directory of the mongodb. It also helps to backup the data from the remote servers as well.\n\nIn order to properly perform the data backup, follow the below mentioned instructions:\n\nStart the mongodb server with the command mongod\n1.\tStart the mongodb client with the command mongo in a new command prompt.\n2.\tSwitch to the required collection and run the command mongodump. Since the mongodump is not actually command from mongodb shell, you need to execute the command as shown below.\n3.\tFrom the above screenshot observer that all the data from the collection mynewdatabase has been dumped.\n4.\tMongodump basically reads the data from the database and creates a BSON file in which the data is dumped. Mongodump writes only documents from the database. The resultant backup of the data will be of the space efficient. The backup of the data will be stored under the mongodb's bin\\dump folder.\n\nAlso, there is one disadvantage of using mongodump which will have some performance impact when the data of a collection is huge than the available system memory.",
    "subtype2": "MongoDB: Restoring Data from Backup",
    "data2": "Now let us learn how to restore the backup data in mongodb. Data backup is basically used to reconstruct the data in case of a loss event. MongoDB helps to restore the backup data through its one of the utility tools called mongorestore which in turn is a command as well.",
    "subtype3": "",
    "data3": "",
    "subtype4": "",
    "data4": ""
  },
  {
    "title": "Sharding in MongoDB",
    "data": "Sharding is the mechanism of storing data across multiple machines. The basic principle of this feature of MongoDB is to support the data growth which is expected any application. Because, at one point of time the accessibility of any application will definitely result in increase of the data growth and it would be difficult to accommodate such a growth of data.\n\nConsidering the data growth which is really difficult to manage in a single system, it is an ideal way to have a cluster containing the replica set of the data. Hence, a horizontal scaling of the data is required and sharding does this in MongoDB. Sharding in simple just adds more machines to handle the sudden or rapid growth of data in an application.\n\nNeed for Sharding in MongoDB :\n\nVertical scaling is too scaling\nIn data backup process all the data will be written to the master nodes.\nSpace in local disk may not be huge enough to handle the data growth.",
    "subtype1": "Application",
    "data1": "Application which is making use of the mongodb and needs to cluster the data across multiple servers.",
    "subtype2": "Shards",
    "data2": "Shards are used to store the actual data. In any production environment each shard will be a separate replica set.",
    "subtype3": "Configuration",
    "data3": "Configuration is nothing but the configured mongodb servers that stores the cluster's metadata. Basically these configuration servers contains mapping of the cluster's data set to the shards. The query router will chose the specific shard based on the metadata for any target operations. In any production environment there will be actually 3 configuration servers.\n\nRefer to the below URL to refer to the detailed steps to configure the shared cluster from the mongodb docs official site:\n\nhttps://docs.mongodb.com/v3.0/tutorial/deploy-shard-cluster/",
    "subtype4": "",
    "data4": ""
  }

]
